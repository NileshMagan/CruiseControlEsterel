module cruiseControl:


function regulateThrottle(boolean, float, float): float;

%interface declarations
input on, off, resume, set, quickDeccel, quickAccel;
input accel : float;
input brake : float;
input speed : float;

output cruiseSpeed : float;
output throttleCmd : float;
output cruiseState := 1: integer;

% CONSTANTS
constant speedMin  = 30.0f   : float;
constant speedMax  = 150.0f  : float;
constant speedInc  = 2.5f    : float;
constant pedalsMin = 3.0f    : float;

% TODO: cruiseEnable
% TODO brkaePressed signal

% TODO double check curiseEnable
% TODO may need to pre(brakePressed)

signal brakePressed, accelPressed, cruiseEnable, withinSpeedLimit in 
	[
	var state := 1 : integer in
		loop
			trap T1 in
				pause; 		% TICK DEPENDANT 
				if (state = 1) then 			% OFF
				
					%%%% NEXT STATE LOGIC
					present on then
						state := 2;
					end present;
				
				
					exit T1;
				end if;
			
				if (state = 2) then			% ON
			
					%%%% NEXT STATE LOGIC
					present off then
						state := 1;
						exit T1;
					end present;
					present brakePressed then
						state := 3;
						exit T1;
					end present;
					 present not(cruiseEnable) then
						state := 4;
						exit T1;
					end present;
				
				
				
					exit T1;
				end if;
			
				if (state = 4) then			% DISABLE
			
					%%%% NEXT STATE LOGIC
					present off then
						state := 1;
						exit T1;
					end present;
					present cruiseEnable then
						state := 2;
						exit T1;
					end present;
				
				
					exit T1;
				end if;
			
				if (state = 3) then			% STDBY
			
					%%%% NEXT STATE LOGIC
					present off then
						state := 1;
						exit T1;
					end present;
					
					present resume and cruiseEnable then
						state := 2; 
						exit T1;
					end present;
					present resume and not(cruiseEnable) then
						state := 4;
						exit T1;				
					end present;
					
					exit T1;
				end if;
			end trap;
			
			%%%% OUTPUT LOGIC
			emit cruiseState(state);
		end loop		
	end var
	]
	
	
||
	
	[ %%%%%%%% BRAKE PRESS DETECTION
		loop
			% TODO check if this should be pre or not
			await brake;
			if (?brake > pedalsMin) then
				emit brakePressed
			end if;
		end loop
	]
	
||
	
	[ %%%%%%%% ACCEL PRESS DETECTION
		loop
			% TODO check if this should be pre or not
			await accel;
			if (?accel > pedalsMin) then
				emit accelPressed
			end if;
		end loop
	]

|| 
	[ %%%%%%%% CALC WITHIN SPEED LIMIT
		loop 
			if (?speed > speedMin) and (?speed < speedMax) then 
				emit withinSpeedLimit
			end if;
			pause
		end loop 
	]
	
|| 
	[ %%%%%%%% CALC CRUISE ENABLE
		loop 
			%TODO, may need a pre here
			present (not accelPressed) and withinSpeedLimit then 
				emit cruiseEnable;
			end present;
			pause
		end loop 
	]
	
||
	[ %%%%%%%% CRUISE SPEED MANAGEMENT 
		loop
			% TODO: Likely need a pre here too
			present (on or set) and withinSpeedLimit then 
				emit cruiseSpeed(?speed) 
			else
				emit cruiseSpeed(0.0f);
			end present; 
		
			present quickAccel then 
				if ((?speed + speedInc) < speedMax) then 
					emit speed(?speed + speedInc);
				end if;
			end present; 

			present quickDeccel then 
				if ((?speed - speedInc) > speedMin) then 
					emit speed(?speed - speedInc);
				end if;
			end present;
			%TODO: pause what we want here?
			pause
		end loop
	]
	
%||
%
%	[ %%%%%%%% DRIVING CONTROL
%		var currentThrottle := 0 : float in	
%			loop 
%				% TODO: may need pre here
%				present (not off) then
%					present (on) then 
%						if (pre(not on)) then
%							regulateThrottle(true, ?cruiseSpeed, ?speed);
%						else
%							regulateThrottle(false, ?cruiseSpeed, ?speed);
%						end if;
%					end present; 	
%				end present;
%				pause 
%			end loop 
%		end var
%	]
	

	
	
end signal	
end module


